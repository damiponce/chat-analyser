import type {NextPage} from 'next';
import Head from 'next/head';
import {useCallback, useEffect, useRef, useState} from 'react';
import {GooSpinner} from 'react-spinners-kit';
import OldBarGraph from '../components/graphs/OldBarGraph';
import Loading from '../components/LoadingSpinner';
import {Uploader} from '../components/Uploader';
import styles from '../styles/Home.module.scss';

import Pyodide from './pyodide/Pyodide';
let code = require('./python/code.py');
let main = require('./python/main.py');

import {ParentSize} from '@visx/responsive';
import FlippableCard from '../components/FlippableCard';
import BarGraph from '../components/graphs/BarGraph';
import {
   HourlyBar,
   HourlyBox,
   HourlyRaw,
   DailyBar,
   DailyBox,
   DailyRaw,
   HeatmapBin,
   HeatmapDelayBin,
   PieSlice,
} from './types/dataTypes';
import BoxPlot from '../components/graphs/BoxPlot';
import Heatmap from '../components/graphs/Heatmap';
import {TbQuestionMark, TbX} from 'react-icons/tb';
import PieChart from '../components/graphs/PieChart';

const Home: NextPage = () => {
   const [df, setDf] = useState<(string[] | Date[])[]>();
   const [output, setOutput] = useState<any>();
   const [pyodide, setPyodide] = useState<any>();
   const [status, setStatus] = useState<string>();
   const [didOutput, setDidOutput] = useState(false);
   const [cards, setCards] = useState(false);
   const [data, setData] = useStateCallback<{
      hourlyBars: HourlyBar[];
      hourlyBoxes: HourlyBox[];
      hourlyRaw?: HourlyRaw[];
      dailyBars: DailyBar[];
      dailyBoxes: DailyBox[];
      dailyRaw?: DailyRaw[];
      heatmapBins: HeatmapBin[];
      pieChart: PieSlice[];
   }>({
      hourlyBars: [],
      dailyBars: [],
      dailyBoxes: [],
      hourlyBoxes: [],
      heatmapBins: [],
      pieChart: [],
   });
   // const [hydrated, setHydrated] = useState(false);

   // useEffect(() => {
   //    setHydrated(true);
   // }, []);

   useEffect(() => {
      if (didOutput === true) {
      }
   }, [didOutput]);

   const JS_CFG = {
      dict_converter: Object.fromEntries,
      create_proxies: false,
   };

   // https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react/61842546#61842546
   function useStateCallback<T>(
      initialState: T,
   ): [T, (state: T, cb?: (state: T) => void) => void] {
      const [state, setState] = useState(initialState);
      const cbRef = useRef<((state: T) => void) | undefined>(undefined); // init mutable ref container for callbacks

      const setStateCallback = useCallback(
         (state: T, cb?: (state: T) => void) => {
            cbRef.current = cb; // store current, passed callback in ref
            setState(state);
         },
         [],
      ); // keep object reference stable, exactly like `useState`

      useEffect(() => {
         // cb.current is `undefined` on initial render,
         // so we only invoke callback on state *updates*
         if (cbRef.current) {
            cbRef.current(state);
            cbRef.current = undefined; // reset callback after execution
         }
      }, [state]);

      return [state, setStateCallback];
   }

   const firstCardRef = useRef<HTMLDivElement>(null);

   useEffect(() => {
      if (cards) {
         firstCardRef.current!.scrollIntoView({behavior: 'smooth'});
      }
   }, [cards]);

   // const seededRandom = getSeededRandom(0.41);
   // const binData = genBins(
   //    /* length = */ 16,
   //    /* height = */ 16,
   //    /** binFunc */ idx => 150 * idx,
   //    /** countFunc */ (i, number) => 25 * (number - i) * seededRandom(),
   // );
   // console.log('====================================');
   // console.log(binData);
   // console.log('====================================');

   // function max<Datum>(data: Datum[], value: (d: Datum) => number): number {
   //    return Math.max(...data.map(value));
   // }

   // function min<Datum>(data: Datum[], value: (d: Datum) => number): number {
   //    return Math.min(...data.map(value));
   // }

   // // accessors
   // const bins = (d: Bins) => d.bins;
   // const count = (d: Bin) => d.count;

   // const colorMax = max(binData, d => max(bins(d), count));
   // const bucketSizeMax = max(binData, d => bins(d).length);

   return (
      <div className={styles.container}>
         <Head>
            <title>Chat Analyser</title>
            {/* <meta name="description" content="Generated by create next app" /> */}
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <div className="debug" style={{display: 'none'}}>
            <p>{output}</p>
            <p>{status}</p>
            <p>{didOutput ? 'true' : 'false'}</p>
         </div>
         <main className={styles.main}>
            {!didOutput ? (
               <Loading condition={true} message={status || ''} />
            ) : (
               <Uploader
                  onFileAdded={(file: any) =>
                     file.data.text().then(async (text: string) => {
                        pyodide.current.globals.set('data', text);
                        await pyodide.current.runPythonAsync(main);

                        let tempDailyBoxes: DailyBox[] = [];
                        for (const [day, values] of Object.entries(
                           pyodide.current.globals.get('dailyBox').toJs(JS_CFG),
                        )) {
                           tempDailyBoxes.push({
                              day: day,
                              min: values.min,
                              max: values.max,
                              lwhisk: values.lwhisk,
                              uwhisk: values.uwhisk,
                              median: values['50%'],
                              q1: values['25%'],
                              q3: values['75%'],
                              outliers: values.outliers,
                           });
                        }

                        let tempHourlyBoxes: HourlyBox[] = [];
                        for (const [hour, values] of Object.entries(
                           pyodide.current.globals
                              .get('hourlyBox')
                              .toJs(JS_CFG),
                        )) {
                           tempHourlyBoxes.push({
                              hour: parseInt(hour),
                              min: values.min,
                              max: values.max,
                              lwhisk: values.lwhisk,
                              uwhisk: values.uwhisk,
                              median: values['50%'],
                              q1: values['25%'],
                              q3: values['75%'],
                              outliers: values.outliers,
                           });
                        }

                        // console.log(
                        //    pyodide.current.globals
                        //       .get('heatmapData')
                        //       .toJs(JS_CFG),
                        // );

                        let tempHeatmapData: HeatmapBin[] = [];
                        for (const [delay, bins] of Object.entries(
                           pyodide.current.globals
                              .get('heatmapData')
                              .toJs(JS_CFG),
                        )) {
                           let tempBins: HeatmapDelayBin[] = [];
                           //@ts-ignore
                           for (const [hour, count] of Object.entries(bins)) {
                              tempBins.push({
                                 hour: parseInt(hour),
                                 //@ts-ignore
                                 count: parseInt(count),
                              });
                           }
                           tempHeatmapData.push({
                              delay: delay,
                              bins: tempBins,
                           });
                        }

                        console.log(
                           pyodide.current.globals
                              .get('usersData')
                              .toJs(JS_CFG),
                        );

                        let tempPieChart: PieSlice[] = [];
                        for (const [user, count] of Object.entries(
                           pyodide.current.globals
                              .get('usersData')
                              .toJs(JS_CFG)[0],
                        )) {
                           let countTyped = count as number;
                           tempPieChart.push({user: user, count: countTyped});
                        }

                        setData(
                           {
                              hourlyBars: pyodide.current.globals
                                 .get('hourlyBars')
                                 .toJs(JS_CFG),
                              dailyBars: pyodide.current.globals
                                 .get('dailyBars')
                                 .toJs(JS_CFG),
                              dailyBoxes: tempDailyBoxes,
                              hourlyBoxes: tempHourlyBoxes,
                              heatmapBins: tempHeatmapData,
                              pieChart: tempPieChart,
                           },
                           s => {
                              console.log(s);
                              setCards(true);
                           },
                        );
                     })
                  }
                  currentMessage={undefined}
               />
            )}

            {cards ? (
               <>
                  <FlippableCard
                     refProp={firstCardRef}
                     frontCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Mean weekly messages</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <BarGraph
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.dailyBars}
                                    labels={{
                                       x: 'Day of the week',
                                       y: 'Messages (Mean)',
                                    }}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     backCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Weekly messages distribution</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <BoxPlot
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.dailyBoxes}
                                    labels={{
                                       x: 'Day of the week',
                                       y: 'Messages (Mean)',
                                    }}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     frontButton="ADVANCED"
                     backButton="SIMPLE"
                  />
                  <FlippableCard
                     frontCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Mean hourly messages</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <BarGraph
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.hourlyBars}
                                    labels={{
                                       x: 'Hour of the day',
                                       y: 'Messages (Mean)',
                                    }}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     backCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Hourly messages distribution</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <BoxPlot
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.hourlyBoxes}
                                    labels={{
                                       x: 'Day of the week',
                                       y: 'Messages (Mean)',
                                    }}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     frontButton="ADVANCED"
                     backButton="SIMPLE"
                  />

                  <FlippableCard
                     frontCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Response time between messages</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <Heatmap
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.heatmapBins}
                                    labels={{
                                       x: 'Day of the week',
                                       y: 'Messages (Mean)',
                                    }}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     backCard={<div></div>}
                     frontButton={<TbQuestionMark size="1.2em" />}
                     backButton={<TbX size="1.2em" />}
                  />

                  {/*   acá debería ir un componente, con dos hijos (?) que sean los dos lados de la tarjeta, y adentro del componente la lógica y el css de los botones para darlo vuelta. también el div main tiene q tener un tamaño fijo para evitar el shift de todo. also ajustar transición.   */}
                  <FlippableCard
                     frontCard={
                        <div
                           style={{
                              width: '100%',
                              height: '100%',
                           }}>
                           <h2>Total messages per user</h2>
                           <ParentSize
                              className="card-graph"
                              debounceTime={50}
                              parentSizeStyles={{
                                 width: '100%',
                                 height: 'calc(100% - 3.5em)',
                              }}>
                              {parent => (
                                 <PieChart
                                    width={parent.width}
                                    height={parent.height}
                                    data={data!.pieChart}
                                 />
                              )}
                           </ParentSize>
                        </div>
                     }
                     backCard={<div></div>}
                     frontButton={<TbQuestionMark size="1.2em" />}
                     backButton={<TbX size="1.2em" />}
                  />
               </>
            ) : null}
            <Pyodide
               id="a"
               pythonCode={code}
               onPythonOutput={(pythonOutput: any, pyodideInstance: any) => (
                  setOutput(pythonOutput),
                  setPyodide(pyodideInstance),
                  setDidOutput(true)
               )}
               currentStatus={(status: string) => {
                  setStatus(status);
               }}
            />
         </main>
      </div>
   );
};

export default Home;
